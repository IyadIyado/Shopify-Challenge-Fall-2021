{"version":3,"sources":["SearchResults.js","Nominations.js","Posters.js","App.js","index.js"],"names":["SearchResults","props","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","data","then","res","json","result","message","length","Response","id","Search","map","movie","style","margin","Title","Year","Button","size","disableElevation","variant","color","float","marginRight","imdbID","disabled","buttonCheck","onClick","addNomination","Nominations","nominations","className","Grid","item","movieIndex","indexOf","buttons","splice","func","removeMovie","Posters","container","spacing","alignItems","justify","list","xs","src","Poster","alt","width","height","App","query","setQuery","nominationList","setNominationList","buttonList","setButtonList","React","open","setOpen","Alert","elevation","openAlert","handleClose","reason","Container","maxWidth","Box","padding","borderColor","border","borderRadius","Paper","TextField","type","fullWidth","value","onChange","event","target","label","placeholder","sm","buttonID","includes","concat","btn","document","getElementById","setAttribute","index","newList","push","Snackbar","autoHideDuration","onClose","severity","ReactDOM","render"],"mappings":"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","file":"static/js/main.4ff1f598.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nexport default function SearchResults(props) {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n\r\n    //api fetching function\r\n    useEffect(() => {\r\n        fetch(\"https://www.omdbapi.com/?apikey=64673092&type=movie&s=\" + props.data)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    setItems([result]);\r\n\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            );\r\n    }, [props.data]);\r\n\r\n\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    } else if (props.data.length >= 3 && items[0].Response === \"True\") {\r\n        //If the above conditions are met, movies with the corresponding search term will be mapped below\r\n        return (\r\n                <>\r\n                <section id={\"lists\"}>\r\n                    <ul>\r\n                        {items[0].Search.map((movie) => (\r\n                            <li key={movie.imdbID} style={{margin:\"1.5em\"}}>\r\n                                \r\n                                    {movie.Title} ({movie.Year})\r\n                                \r\n                                \r\n                                    <Button\r\n                                    size=\"small\"\r\n                                    disableElevation \r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    style={{float:\"right\", marginRight: \"1%\"}}\r\n                                    id={movie.imdbID}\r\n                                    disabled={props.buttonCheck(movie.imdbID)} \r\n                                    onClick={() => {props.addNomination(movie, movie.imdbID);}}>\r\n                                        Nominate ü•á\r\n                                    </Button>\r\n                                \r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </section>\r\n            </>\r\n        );\r\n    } else if(props.data.length < 3) {\r\n        return (\r\n        <>\r\n            <p>Your Search Results will appear here!</p>\r\n        </>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>No Titles found matching that name üò¢</div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//ü•á üëç üèÜ ‚úîÔ∏è","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Grid} from \"@material-ui/core\"\r\nimport \"./CSS/Nominations.css\";\r\n\r\nexport default function Nominations(props) {\r\n    //This function will call the updateNominations function from the parent component\r\n    //It will remove the requested movie on button click, as well as the appropriate button\r\n    function removeMovie(movie) {\r\n        const movieIndex = props.nominations.indexOf(movie);\r\n        props.buttons.splice(movieIndex, 1);\r\n        props.func(movieIndex);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <ol>\r\n            {props.nominations.map((movie) => (\r\n            <li\r\n                key={movie.imdbID}\r\n                className={\"swing-in-top-fwd\"}\r\n                style={{ margin: \"1.5em\" }}\r\n            >\r\n                <Grid item>\r\n                    {movie.Title} ({movie.Year})\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <Button\r\n                    onClick={() => removeMovie(movie)}\r\n                    size=\"small\"\r\n                    disableElevation\r\n                    variant=\"outlined\"\r\n                    style={{ float: \"right\", marginRight: \"1%\" }}\r\n                    color=\"secondary\"\r\n                    >\r\n                    Remove ‚ùå\r\n                    </Button>\r\n                </Grid>\r\n            </li>\r\n            ))}\r\n        </ol>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./CSS/Posters.css\";\r\n\r\n//The purpose of this component is to render the posters of the user nominated movies\r\n\r\nexport default function Posters(props) {\r\n    return (\r\n        <>\r\n        <Grid container spacing={1} alignItems=\"center\" justify=\"center\">\r\n            {props.list.map((movie) => (\r\n            <Grid item xs={2} key={movie.imdbID}>\r\n                <img\r\n                className={\"fade-in-bottom\"}\r\n                src={movie.Poster}\r\n                alt={\"Poster for the movie\" + movie.Title}\r\n                key={movie.imdbID}\r\n                style={{ width: \"100%\", height: \"auto\" }}\r\n                />\r\n            </Grid>\r\n            ))}\r\n        </Grid>\r\n        </>\r\n    );\r\n}\r\n","import './CSS/App.css';\nimport React, {useState} from \"react\"\nimport SearchResults from \"./SearchResults\"\nimport Nominations from \"./Nominations\"\nimport Posters from \"./Posters\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Paper from \"@material-ui/core/Paper\"\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { Box } from '@material-ui/core';\n\n\nexport default function App() {\n\tconst [query, setQuery] = useState(\"\")\n\tconst [nominationList, setNominationList] = useState([])\n\tconst [buttonList, setButtonList] = useState([])\n\tconst [open, setOpen] = React.useState(false);\n\t\t\t\n\t//This function is part of the snackbar component from Material-ui\n\tconst changeHandler = (event) => {\n\t\tsetQuery(event.target.value);\n\t}\n\n\t//This function is part of the snackbar component\n\tfunction Alert(props) {\n\t\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n\t}\n\t\n\t//This function is part of the snackbar component from material-ui\n\tconst openAlert = () => {\n\t\tsetOpen(true);\n\t};\n\t\n\t//This function is part of the snackbar component from material-ui\n\tconst handleClose = (reason) => {\n\t\tif (reason === 'clickaway') {\n\t\treturn;\n\t\t}\n\t\n\t\tsetOpen(false);\n\t};\n\n\t//This function will be initiated from the childcomponent <Nominations.js>\n    //It will recieve the index of the movie to be removed from the nominations list\n    //and it will update the appropriate state.\n    function updateNominations(index){\n        let newList = []\n        nominationList.splice(index, 1)\n        nominationList.map((movie) => (\n            newList.push(movie)\n        ))\n        setNominationList(newList)\n\t}\n\n\t//This function is reponsible for disabling/enabling the nominate button depending on\n    //whether the movie is in the nominations list or not.\n    function buttonCheck(buttonID) {\n\t\tif (buttonList.length > 0) {\n\t\t\tif(buttonList.includes(buttonID)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\t// This function will be initiated from the childcomponent <SearchResults.js>\n\t// Params: movie; This is the movie object\n    // Params: buttonID; This is the ID of the button\n    // It will check to see that the nomination list does not exceed 5 elements\n    // If less than 5, it will add the movie, and it will add the appropriate button to the button list to be disabled\n    // If 5 movies are selected, the user will be alerted that they can't add anymore movies\n    function addNomination(movie, buttonID) {\n        if(nominationList.length < 5) {\n            setNominationList(nominationList.concat(movie));\n            let btn = document.getElementById(`${buttonID}`);\n            setButtonList(buttonList.concat(buttonID))\n            btn.setAttribute(\"disabled\", \"true\")\n            if(nominationList.length === 4) {\n\t\t\t\topenAlert()\n            }\n        } else {\n            openAlert()\n        }\n    }\n\n\treturn (\n\t\t\t<>\t\n\t\t\t\t<Container maxWidth=\"xl\">\n\t\t\t\t\t<Box margin={3} padding={3} borderColor=\"rgb(255,255,255)\" border={1} borderRadius={5}>\n\t\t\t\t\t\t<h1 id=\"heading\">The Shoppies: Movie Awards for Entrepreneurs</h1>\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t<Grid container spacing={3}>\t\n\n\t\t\t\t\t\t<Posters list={nominationList}/>\n\n\t\t\t\t\t\t<Grid item xs={12} id={\"SearchBar\"} >\n\t\t\t\t\t\t\t<Paper elevation={7}>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tid=\"SearchBarInput\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tvalue={query}\n\t\t\t\t\t\t\tonChange={changeHandler}\n\t\t\t\t\t\t\tlabel=\"üîçSearch\"\n\t\t\t\t\t\t\tplaceholder=\"i.e. Interstellar, La La Land, etc...\"\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t<Grid item xs={12} sm={6} id={\"SearchResults\"}>\n\t\t\t\t\t\t\t\t<h1>Search Results</h1>\n\t\t\t\t\t\t\t\t<SearchResults data={query} buttonCheck={buttonCheck} addNomination={addNomination}/>\t\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t\t\t<h1>Nominations</h1>\n\t\t\t\t\t\t\t\t<Nominations nominations={nominationList} buttons={buttonList} func={updateNominations} />\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Snackbar open={open} autoHideDuration={5000} onClose={handleClose}>\n\t\t\t\t\t\t\t<Alert onClose={handleClose} severity=\"success\">\n\t\t\t\t\t\t\t\tCongratulations! You've nominated 5 movies!\n\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t</Snackbar>\n\t\t\t\t\t\t\t\n\t\t\t\t\t</Grid>\n\t\t\t\t\t</Box>\n\t\t\t\t</Container>\n\t\t\t</>\n\t\t);\n\t}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}